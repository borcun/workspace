#lang racket

(define sample-dna "TGACATTTCAGGTGAAAATCGTCCACATTCAGCAAAGCTAAGGTCAACCGGCTTTGTCACCGAACGAAAGCCAGGTAATTACATCTAGTGCAAACTACGCATCGCCGTAGCTCTACCACTGCTATTAATCAAGCGGTACTTACCGTTTACAAGCTTGGCACTGCAGCGTCCTTCGTGTCGGTGCTGTCATGGTTTCGTCTCATTTACGCGGGTCTCACGCCCCACATCCCCAAAACAAGTGGCGGAACGAAACATGGAAGCTTAGCAGAGGCTTTAACGGGCGACCGCTTTCATATAGGTGACATTCGATGGCCGGTAGGTCACTACCAAAGATTTTTTGTGCACTCCGTAGATGTAGTGTGTAGATACCCATCTTAACCAGCGCTGGCGATGTTAGTGGTAGAAACTCTCGAAAGCGAGTCCAAAGGGCGCTGGTGAAGTGCCTCTAGCTGTGTTCATGGCCGTAGTAGTAGGCCACTAAGATCTCCTCTCACGGCTGATGCGGGCCATGAGCTTGTGACGCTAAATGTAAGATTTGGCACCTTATTGCCTCCCCGCATCCACAATTAATGCTACGTAGCCCATAACTTATTAGGGGGTAGCTTCATGGAGGATGGCGATTTAGAGTTCCGAGACGTTACGTCAAGCCCAAAAGCTCGGGGCAAATCAAAGGCTCGGGGAGCGTCCATGAGAGCCATAAGCGTGTTGATACGGATGAACATCAGGCGTGGTTAGTTTACAGGCACAGATCAGCCGATGTACCATTTTGGCCCCAGAGGACGATGAGAATAGCTAGTCCAGCTTAAGCAGCCATG")
(define nucleotides "ATGC")

(define (count-nucleotide dna nucleotide)
  (printf "Nucleotide: ~a (~a)\n" nucleotide (length (string-split dna nucleotide))))

(define (examine-dna dna nucleotides)
  (unless (zero? (string-length nucleotides))
    (let ((nuc (string (string-ref nucleotides 0))))
      (count-nucleotide dna nuc)
      (examine-dna dna (substring nucleotides 1)))))

(examine-dna sample-dna nucleotides)